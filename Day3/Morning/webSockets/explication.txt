1. Qu'est-ce que WebSocket ?
WebSocket est un protocole de communication réseau permettant
 d'établir une connexion persistante et bidirectionnelle entre
  le client (généralement un navigateur web) et le serveur.
   Contrairement aux requêtes HTTP traditionnelles,
    où chaque requête et réponse est indépendante et isolée,
     WebSocket permet une communication continue, ce qui est 
     idéal pour des applications temps réel, 
     telles que les chats en ligne, les jeux multijoueurs,
      ou les mises à jour en temps réel des données.

Caractéristiques principales :

Connexion bidirectionnelle : Le client et le serveur peuvent
 échanger des données dans les deux sens à tout moment, sans avoir
  besoin de nouvelles requêtes.
Connexion persistante : Une fois la connexion WebSocket établie,
 elle reste ouverte jusqu'à ce qu'une des parties décide de la 
 fermer.
Temps réel : Idéal pour les applications qui nécessitent des
 mises à jour en temps réel, comme les notifications push, 
 les applications de chat, ou les dashboards interactifs.
2. Le protocole WebSocket
WebSocket est un protocole indépendant du protocole HTTP,
 mais il fonctionne en surcouche d'un serveur HTTP. Lorsqu'une 
 connexion WebSocket est établie, elle commence par une demande
  d'upgrade HTTP. Une fois que le serveur accepte cette demande, 
  la connexion est transformée en WebSocket, et les deux parties
   peuvent échanger des messages.

Exemple de handshake WebSocket :

Le client envoie une requête HTTP avec un en-tête spécial Upgrade:
 websocket.
Le serveur répond avec un en-tête d'acceptation pour établir la 
connexion WebSocket.
3. Utilisation de WebSockets en JavaScript
JavaScript offre une API native pour utiliser WebSockets dans le 
navigateur via l'interface WebSocket. Voici un exemple simple de 
mise en œuvre d'une connexion WebSocket côté client.

Création d'un objet WebSocket
La syntaxe pour créer une nouvelle connexion WebSocket est la 
*suivante :

let socket = new WebSocket('ws://example.com/socket');
Le protocole WebSocket est généralement représenté par ws:// 
(ou wss:// pour une connexion sécurisée) suivi de l'URL du 
serveur qui gère la connexion WebSocket.

Événements de WebSocket
Les objets WebSocket possèdent plusieurs événements importants 
pour gérer les messages entrants et sortants ainsi que les erreurs :

onopen : Déclenché lorsque la connexion WebSocket est établie.
onmessage : Déclenché lorsque le client reçoit un message du 
serveur.
onerror : Déclenché en cas d'erreur sur la connexion WebSocket.
onclose : Déclenché lorsque la connexion est fermée.
Exemple complet d'une connexion WebSocket
Voici un exemple qui montre comment établir une connexion 
WebSocket, envoyer un message au serveur et recevoir des messages
 du serveur.

// Créer un objet WebSocket
let socket = new WebSocket('ws://example.com/socket');

// Ouvrir la connexion
socket.onopen = function(event) {
  console.log('Connexion WebSocket établie !');
  // Envoyer un message au serveur
  socket.send('Hello, server!');
};

// Recevoir un message du serveur
socket.onmessage = function(event) {
  console.log('Message reçu du serveur :', event.data);
};

// Gérer les erreurs
socket.onerror = function(error) {
  console.log('Erreur WebSocket:', error);
};

// Fermer la connexion WebSocket
socket.onclose = function(event) {
  console.log('Connexion WebSocket fermée', event);
};
4. Avantages de WebSocket
Temps réel : Permet des mises à jour instantanées sans avoir à envoyer plusieurs requêtes HTTP.
Moins de surcharge : Contrairement aux requêtes HTTP classiques qui nécessitent un en-tête complet à chaque fois, WebSocket a une surcharge minimale, réduisant ainsi le trafic réseau.
Communication bidirectionnelle : Les serveurs peuvent envoyer des données au client sans que celui-ci ait besoin de demander une nouvelle requête (ex. pour des notifications push).
Performance : Une fois la connexion ouverte, l'échange de données est très rapide, ce qui est essentiel pour les applications en temps réel.
5. Cas d'utilisation de WebSockets
Applications de chat en ligne : Permet de recevoir et envoyer des messages instantanément.
Jeux multijoueurs : Permet la mise à jour en temps réel de l'état du jeu entre plusieurs joueurs.
Notifications push : Permet de pousser des notifications vers les clients dès qu'un événement survient.
Dashboards interactifs : Mise à jour des graphiques et des données en temps réel (ex. : actions en bourse, suivi des serveurs).
Streaming de données : Transmission en direct de données audio, vidéo ou autres.
6. WebSocket sécurisé (WSS)
Il est recommandé d'utiliser le protocole sécurisé wss:// (WebSocket Secure) pour les connexions en production, surtout lorsqu'il s'agit d'échanger des informations sensibles. Il est similaire à HTTPS et chiffre les données transmises sur la connexion WebSocket.

let socket = new WebSocket('wss://example.com/socket');
7. Fermeture d'une connexion WebSocket
La connexion WebSocket peut être fermée de manière propre par le client ou le serveur. Voici comment fermer une connexion WebSocket du côté client :

socket.close();
Cela entraînera l'événement onclose du côté client et le serveur recevra également une notification de fermeture de la connexion.

8. Conclusion
WebSockets est une technologie puissante qui permet une 
communication bidirectionnelle en temps réel 
entre un client et un serveur. Avec WebSockets, 
il devient plus facile de créer des applications interactives, 
réactives et en temps réel, telles que les applications 
de chat, les jeux multijoueurs, et bien plus encore. 
Les avantages de WebSocket incluent des communications
légères et une faible latence,
ce qui en fait un choix idéal pour des 
applications nécessitant une mise à jour
instantanée des données.



****************
nom of sender

****************
Pour afficher le nom de l'expéditeur (sender) de chaque message sur tous les clients, y compris celui qui a envoyé le message, vous devez suivre ces étapes :

1. Ajouter un champ sender au message
Lors de l'envoi d'un message, il faut inclure le nom de l'expéditeur avec le message. Le serveur WebSocket doit transmettre cette information à tous les clients.

2. Modifier le serveur WebSocket pour envoyer le nom de l'expéditeur
Le serveur WebSocket doit envoyer un objet contenant à la fois le nom de l'expéditeur et le message.

3. Modifier le client pour afficher le nom de l'expéditeur avec chaque message
Exemple complet
Voici un exemple complet où chaque message contient le nom de l'expéditeur, et ce nom est affiché sur tous les clients, y compris celui qui a envoyé le message.

1. Serveur WebSocket en Node.js (exemple basique) :
javascript
Copy code
// server.js
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

wss.on('connection', (ws) => {
  console.log('Un client est connecté');

  // Recevoir un message et le diffuser à tous les clients
  ws.on('message', (message) => {
    const data = JSON.parse(message);
    
    // Diffuser le message (avec le nom de l'expéditeur) à tous les clients
    wss.clients.forEach((client) => {
      if (client !== ws && client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(data));  // Envoi du message avec sender
      }
    });
  });

  // Détection de la fermeture de la connexion WebSocket
  ws.on('close', () => {
    console.log('Un client a quitté');
  });
});

console.log('Serveur WebSocket lancé sur ws://localhost:8080');
2. Client HTML + JavaScript
Le client envoie un message contenant à la fois le message et le nom de l'expéditeur. Tous les autres clients reçoivent ce message et l'affichent avec le nom de l'expéditeur.

html
Copy code
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat avec WebSocket</title>
  <style>
    #messages {
      list-style-type: none;
      padding: 0;
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ccc;
    }

    #messages li {
      padding: 8px;
      border-bottom: 1px solid #ddd;
    }

    input[type="text"] {
      width: 80%;
      padding: 8px;
    }

    button {
      padding: 8px 12px;
    }
  </style>
</head>
<body>

  <h1>Chat en temps réel</h1>
  <ul id="messages"></ul>

  <input type="text" id="messageInput" placeholder="Tapez un message...">
  <input type="text" id="senderName" placeholder="Entrez votre nom...">
  <button id="sendMessageButton">Envoyer</button>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const socket = new WebSocket('ws://localhost:8080');
      const messageList = document.getElementById('messages');
      const messageInput = document.getElementById('messageInput');
      const senderNameInput = document.getElementById('senderName');
      const sendMessageButton = document.getElementById('sendMessageButton');

      // Affichage des messages reçus du serveur
      socket.onmessage = (event) => {
        const data = JSON.parse(event.data); // Parse le message envoyé par le serveur

        const newMessage = document.createElement('li');
        newMessage.textContent = `${data.sender}: ${data.message}`;  // Affichage du message avec sender
        messageList.appendChild(newMessage);

        // Faire défiler vers le bas
        messageList.scrollTop = messageList.scrollHeight;
      };

      // Fonction pour envoyer un message
      sendMessageButton.addEventListener('click', function () {
        const message = messageInput.value;
        const sender = senderNameInput.value || 'Anonyme';  // Si aucun nom, mettre "Anonyme"

        if (message) {
          const messageData = {
            sender: sender,
            message: message
          };

          socket.send(JSON.stringify(messageData));  // Envoi du message avec le sender
          messageInput.value = '';  // Effacer le champ de saisie
        }
      });
    });
  </script>

</body>
</html>
Explication :
Serveur WebSocket :

Le serveur reçoit un message qui contient à la fois le message et le nom de l'expéditeur (dans data.sender et data.message).
Le serveur diffuse ensuite ces informations à tous les autres clients connectés via wss.clients.forEach.
Client WebSocket :

L'utilisateur entre son nom dans le champ senderName et tape un message dans le champ messageInput.
Lorsque l'utilisateur clique sur le bouton "Envoyer", un objet JSON est envoyé au serveur contenant le nom de l'expéditeur et le message. Ce message est ensuite diffusé à tous les clients.
Affichage des messages :

Lorsqu'un message est reçu, le nom de l'expéditeur et le contenu du message sont affichés dans la liste des messages avec cette structure : sender: message.
Le message est affiché dans la liste des messages, et la page défile automatiquement pour montrer le dernier message.